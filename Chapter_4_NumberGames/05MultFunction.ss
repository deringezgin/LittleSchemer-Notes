(define println
  (lambda (s)
    (display s)
    (newline)))

(define sub1
  (lambda (n)
    (- n 1)))

(define x
  (lambda (a b)
    (cond
      ((zero? b) 0)
      (else (+ a (x a (sub1 b)))))))

(newline)
(display "What is (x 5 3) --> ")
(println (x 5 3))

(newline)
(display "What is (x 13 4) --> ")
(println (x 13 4))

#|THE FOURTH COMMANDMENT
ALWAYC CHANGE AT LEAST ONE ARGUMENT WHILE RECURRING. IT MUST BE CHANGED TO BE CLOSER TO TERMINATION
THE CHANGING ARGUMENT MUST BE TESTED IN THE TERMINATION CONDITION
IF WE USE CDR, TEST NULL?
IF WE USE SUB1, TEST ZERO?
|#

(newline)

#|
THE FIFTHE COMMANDMENT
WHEN BUILDING A VALUE WITH +, ALWAYS USE 0 FOR THE VALUE OF THE TERMINATING LINE, FOR ADDING 0 DOES NOT CHANGE TH EVALUE OF AN ADDITION
WHEN BUILDING A VALUE WITH X, ALWAYS USE 1 FOR THE VALUE OF THE TERIMATING LINE FOR MULTIPLYING BY 1 DOES NOT CHANGE THE VALUE OF MULTIPLACTION
WHEN BULDING A VALUE WITH CONS, ALWAYS CONSIDER () FOR THE VALUE OF THE TERMINATING LINE
|#

(newline)